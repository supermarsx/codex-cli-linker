import importlib.util
import sys
from pathlib import Path


def load_cli():
    spec = importlib.util.spec_from_file_location(
        "codex_cli_linker", Path(__file__).resolve().parents[1] / "codex-cli-linker.py"
    )
    cli = importlib.util.module_from_spec(spec)
    sys.modules[spec.name] = cli
    spec.loader.exec_module(cli)
    return cli


def test_to_toml_filters_and_formats():
    cli = load_cli()
    cfg = {
        "model": "x",
        "model_provider": "lmstudio",
        "approval_policy": "",
        "sandbox_mode": "workspace-write",
        "tui": "table",
        "hide_agent_reasoning": False,
        "model_context_window": 0,
        "tools": {"web_search": True, "noop": ""},
        "history": {"persistence": "file", "max_bytes": 0, "empty": None},
        "sandbox_workspace_write": {
            "allow": ["foo", "bar"],
            "deny": [],
            "null": None,
            "enabled": False,
        },
    }
    out = cli.to_toml(cfg)
    expected = """# Generated by codex-cli-linker
model = \"x\"
model_provider = \"lmstudio\"
sandbox_mode = \"workspace-write\"
model_context_window = 0
hide_agent_reasoning = false

[tools]
web_search = true

[history]
persistence = \"file\"
max_bytes = 0

[sandbox_workspace_write]
allow = [ \"foo\", \"bar\" ]
enabled = false
"""
    assert out.strip() == expected.strip()
    assert "tui" not in out
    assert "approval_policy" not in out
    assert "noop" not in out
    assert "deny" not in out
