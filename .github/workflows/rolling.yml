name: Rolling Release

on:
  push:
    branches: [main]
  workflow_dispatch: {}
  schedule:
    - cron: '0 3 * * *'  # Daily at 03:00 UTC

permissions:
  contents: write

jobs:
  build_x64:
    name: Build x64 (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]
        py: ["3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install pyinstaller

      - name: Build single-file binary (x64)
        shell: bash
        run: |
          pyinstaller -F -n codex-cli-linker codex-cli-linker.py
          mkdir -p release
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp dist/codex-cli-linker.exe "release/codex-cli-linker-windows-x64.exe"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            cp dist/codex-cli-linker "release/codex-cli-linker-macos-x64"
          else
            cp dist/codex-cli-linker "release/codex-cli-linker-linux-x64"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rolling-${{ runner.os }}-x64
          path: release/*
          if-no-files-found: error

  build_arm:
    name: Build arm64 (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04-arm, macos-14, windows-11-arm]
        py: ["3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install pyinstaller

      - name: Build single-file binary (arm64)
        shell: bash
        run: |
          pyinstaller -F -n codex-cli-linker codex-cli-linker.py
          mkdir -p release
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp dist/codex-cli-linker.exe "release/codex-cli-linker-windows-arm64.exe"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            cp dist/codex-cli-linker "release/codex-cli-linker-macos-arm64"
          else
            cp dist/codex-cli-linker "release/codex-cli-linker-linux-arm64"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rolling-${{ runner.os }}-arm64
          path: release/*
          if-no-files-found: error

  rolling_release:
    name: Publish Rolling Release
    needs: [build_x64, build_arm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten artifacts
        run: |
          mkdir -p dist_flat
          find dist -maxdepth 3 -type f -print -exec cp {} dist_flat/ \;

      - name: Delete existing assets on rolling release (if any)
        uses: actions/github-script@v7
        with:
          script: |
            const tag = 'rolling';
            const {owner, repo} = context.repo;
            try {
              const rel = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              const assets = rel.data.assets || [];
              for (const asset of assets) {
                try {
                  await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: asset.id });
                } catch (e) {
                  core.warning(`Failed to delete asset ${asset.name}: ${e.message}`);
                }
              }
              core.info(`Cleaned ${assets.length} existing assets on release id ${rel.data.id}`);
            } catch (e) {
              core.info('No existing rolling release. It will be created.');
            }

      - name: Create/Update rolling GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: rolling
          name: Rolling Release
          prerelease: true
          draft: false
          make_latest: false
          files: dist_flat/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

