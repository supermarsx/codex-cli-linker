name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:

# Ensure the job can request an OIDC token and write to the repo
permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip build ruff black pytest pytest-cov pytest-timeout

      - name: Sync version from tag and commit
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          set -euo pipefail
          TAG_NAME="${RELEASE_TAG:-${GITHUB_REF_NAME:-}}"
          if [ -z "$TAG_NAME" ]; then
            echo "Unable to detect tag name" >&2
            exit 1
          fi
          VERSION="${TAG_NAME#v}"
          echo "Release tag: $TAG_NAME => Version: $VERSION"
          # Update version in pyproject.toml
          sed -i -E "s/^version = \".*\"$/version = \"${VERSION}\"/" pyproject.toml
          echo "Updated pyproject.toml version to $VERSION"
          # Commit the change only if there is a diff
          if ! git diff --quiet; then
            git config user.name "github-actions"
            git config user.email "github-actions@users.noreply.github.com"
            git add pyproject.toml
            git commit -m "chore: bump version to ${VERSION} [skip ci]"
            # Push back to default branch
            DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
            git push origin HEAD:"$DEFAULT_BRANCH"
          else
            echo "No version change to commit"
          fi

      - name: Lint
        run: ruff check .

      - name: Check formatting
        run: black --check .

      - name: Run tests
        run: pytest

      - name: Build distributions
        run: |
          python -m build --outdir dist

      - name: Verify artifacts exist
        run: |
          test -d dist && [ -n "$(ls -A dist)" ] || { echo "dist/ is empty"; ls -la; exit 1; }

      - name: Publish to PyPI (Trusted Publisher via OIDC)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          packages-dir: dist
        # If using TestPyPI, set repository-url: https://test.pypi.org/legacy/
