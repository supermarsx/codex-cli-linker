name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_run:
    workflows:
      - Release
    types:
      - completed
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag (vX.Y.Z) to publish; optional"
        required: false
        type: string
      target:
        description: "Publish destination: pypi or testpypi"
        required: false
        default: pypi
        type: choice
        options:
          - pypi
          - testpypi

# Ensure the job can request an OIDC token and write to the repo
permissions:
  contents: write
  id-token: write

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false
jobs:
  publish:
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    env:
      HAS_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      HAS_TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip build ruff black pytest pytest-cov pytest-timeout

      - name: Sync version from tag and commit
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          INPUT_TAG: ${{ inputs.tag }}
          WORKFLOW_RUN_SHA: ${{ github.event.workflow_run.head_sha }}
          WORKFLOW_RUN_CONCLUSION: ${{ github.event.workflow_run.conclusion }}
        run: |
          set -euo pipefail
          TAG_NAME="${RELEASE_TAG:-}"; [ -z "$TAG_NAME" ] && TAG_NAME="${INPUT_TAG:-}"
          if [ -z "$TAG_NAME" ] && [ "${GITHUB_EVENT_NAME}" = "workflow_run" ]; then
            if [ -n "${WORKFLOW_RUN_SHA:-}" ]; then
              TAG_NAME=$(git describe --tags --exact-match "${WORKFLOW_RUN_SHA}" 2>/dev/null || true)
            fi
          fi
          # If still empty, accept GITHUB_REF_NAME when it looks like a tag (refs/tags or value starts with v)
          if [ -z "$TAG_NAME" ]; then
            case "${GITHUB_REF:-}" in
              refs/tags/*) TAG_NAME="${GITHUB_REF#refs/tags/}" ;;
              *)
                case "${GITHUB_REF_NAME:-}" in
                  v*) TAG_NAME="$GITHUB_REF_NAME" ;;
                esac ;;
            esac
          fi
          if [ -z "$TAG_NAME" ]; then
            echo "No release tag detected; skipping version sync (using pyproject version)."
            exit 0
          fi
          VERSION="${TAG_NAME#v}"
          echo "Release tag: $TAG_NAME => Version: $VERSION"
          # Update version in pyproject.toml
          sed -i -E "s/^version = \".*\"$/version = \"${VERSION}\"/" pyproject.toml
          echo "Updated pyproject.toml version to $VERSION"
          # Commit the change only if there is a diff
          if ! git diff --quiet; then
            git config user.name "github-actions"
            git config user.email "github-actions@users.noreply.github.com"
            git add pyproject.toml
            git commit -m "chore: bump version to ${VERSION} [skip ci]"
            # Push back to default branch
            DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
            git push origin HEAD:"$DEFAULT_BRANCH"
          else
            echo "No version change to commit"
          fi

      - name: Lint
        run: ruff check .

      - name: Check formatting
        run: black --check .

      - name: Run tests
        run: pytest

      - name: Build distributions
        run: |
          python -m build --outdir dist

      - name: Verify artifacts exist
        run: |
          test -d dist && [ -n "$(ls -A dist)" ] || { echo "dist/ is empty"; ls -la; exit 1; }

      - name: Publish to TestPyPI (token)
        if: ${{ inputs.target == 'testpypi' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          packages-dir: dist

      - name: Publish to PyPI (Trusted Publisher via OIDC)
        if: ${{ inputs.target != 'testpypi' && env.HAS_PYPI_TOKEN == '' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          packages-dir: dist

      - name: Publish to PyPI (API token)
        if: ${{ inputs.target != 'testpypi' && env.HAS_PYPI_TOKEN != '' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          packages-dir: dist
