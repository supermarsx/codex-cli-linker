name: Release
permissions:
  contents: read

on:
  push:
    tags:
      - "v*"          # e.g., v0.1.0
      - "release-*"   # e.g., release-2025-09-07
  workflow_dispatch: {}

jobs:
  build:
    name: Build binaries (${{ matrix.artifact }})
    runs-on: ${{ matrix.runner }}
    continue-on-error: ${{ matrix.allow_failure || false }}
    strategy:
      fail-fast: false
      matrix:
        py: ["3.11"]
        include:
          - runner: ubuntu-latest
            artifact: linux-x64
            ext: ""
          - runner: ubuntu-24.04-arm
            artifact: linux-arm64
            ext: ""
          - runner: macos-latest
            artifact: macos-x64
            ext: ""
          - runner: macos-14
            artifact: macos-arm64
            ext: ""
          - runner: windows-latest
            artifact: windows-x64.exe
            ext: ".exe"
          # Windows ARM64 runner availability may vary; allow failure if unsupported
          - runner: windows-2022-arm
            artifact: windows-arm64.exe
            ext: ".exe"
            allow_failure: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install pyinstaller

      - name: Build single-file binary
        shell: bash
        run: |
          pyinstaller -F -n codex-cli-linker codex-cli-linker.py
          mkdir -p release
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp dist/codex-cli-linker.exe "release/codex-cli-linker-${{ matrix.artifact }}"
          else
            cp dist/codex-cli-linker "release/codex-cli-linker-${{ matrix.artifact }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.artifact }}
          path: release/*
          if-no-files-found: error

  release:
    permissions:
      contents: write
    name: Publish GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten artifacts
        run: |
          mkdir -p dist_flat
          find dist -type f -maxdepth 3 -print -exec cp {} dist_flat/ \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          files: dist_flat/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
