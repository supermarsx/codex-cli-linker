name: Scoop Update

on:
  release:
    types: [published]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  update_scoop_manifest:
    name: Update Scoop Manifest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and URLs
        id: meta
        shell: bash
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          set -euo pipefail
          TAG=${RELEASE_TAG:-${GITHUB_REF_NAME}}
          if [[ -z "${TAG}" ]]; then
            echo "No tag found on event; aborting" >&2
            exit 1
          fi
          # If not triggered by a tag (e.g., manual run), derive TAG from pyproject version
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            if [[ -f pyproject.toml ]]; then
              VER=$(sed -n -E 's/^version\s*=\s*"([0-9]+\.[0-9]+\.[0-9]+)"/\1/p' pyproject.toml | head -n1)
              if [[ -n "${VER}" ]]; then TAG="v${VER}"; fi
            fi
          fi
          VERSION=${TAG#v}
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          # Tag-specific asset URL (manifest pin)
          echo "win_url_tag=https://github.com/${GITHUB_REPOSITORY}/releases/download/${TAG}/codex-cli-linker-windows-x64.exe" >> "$GITHUB_OUTPUT"
          # Latest asset URL (CI fallback/fast path)
          echo "win_url_latest=https://github.com/${GITHUB_REPOSITORY}/releases/latest/download/codex-cli-linker-windows-x64.exe" >> "$GITHUB_OUTPUT"

      - name: Choose available Windows asset URL (latest or tag)
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          latest='${{ steps.meta.outputs.win_url_latest }}'
          tagurl='${{ steps.meta.outputs.win_url_tag }}'
          echo "Probing latest URL: $latest"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" -L "$latest" || true)
            [[ "$code" == "200" ]] && { echo "selected=$latest" >> "$GITHUB_OUTPUT"; echo "Selected latest URL"; exit 0; }
            echo "Attempt $i/30: latest not ready (HTTP $code); sleeping 5s"; sleep 5
          done
          echo "Falling back to tag URL: $tagurl"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" -L "$tagurl" || true)
            [[ "$code" == "200" ]] && { echo "selected=$tagurl" >> "$GITHUB_OUTPUT"; echo "Selected tag URL"; exit 0; }
            echo "Attempt $i/30: tag not ready (HTTP $code); sleeping 5s"; sleep 5
          done
          echo "Neither latest nor tag URL became available" >&2
          exit 22

      - name: Download Windows artifact
        shell: bash
        run: |
          set -euo pipefail
          curl -fL "${{ steps.pick.outputs.selected }}" -o codex-cli-linker-windows-x64.exe

      - name: Compute SHA256
        id: sha
        shell: bash
        run: |
          set -euo pipefail
          sha=$(sha256sum codex-cli-linker-windows-x64.exe | awk '{print $1}' | tr '[:lower:]' '[:upper:]')
          echo "sha256=${sha}" >> "$GITHUB_OUTPUT"

      - name: Update Scoop manifest
        shell: bash
        env:
          VERSION: ${{ steps.meta.outputs.version }}
          WIN_URL: ${{ steps.meta.outputs.win_url_tag }}
          SHA256: ${{ steps.sha.outputs.sha256 }}
        run: |
          set -euo pipefail
          file='scoop/codex-cli-linker.json'
          # Update version
          sed -i -E "s/(\"version\"\s*:\s*\")[^"]+(\")/\1${VERSION}\2/" "$file"
          # Update URL for 64bit architecture
          sed -i -E "s#(\"url\"\s*:\s*\")[^"]+(codex-cli-linker-windows-x64\.exe\")#\1${WIN_URL}\2#" "$file"
          # Update SHA256 (uppercase expected in current manifest)
          sed -i -E "s/(\"hash\"\s*:\s*\")[^"]+(\")/\1${SHA256}\2/" "$file"

      - name: Commit and push
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet -- scoop/codex-cli-linker.json; then
            git config user.name "${GITHUB_ACTOR}"
            git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
            git add scoop/codex-cli-linker.json
            git commit -m "chore(scoop): update manifest to v${{ steps.meta.outputs.version }} [skip ci]"
            DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
            git push origin HEAD:"$DEFAULT_BRANCH"
          else
            echo "Scoop manifest unchanged; nothing to commit"
          fi

