name: Homebrew Update

on:
  release:
    types: [published]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  update_homebrew_formula:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and tarball URL
        id: meta
        shell: bash
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          set -euo pipefail
          TAG=${RELEASE_TAG:-${GITHUB_REF_NAME}}
          if [[ -z "${TAG}" ]]; then
            echo "No tag found on event; aborting" >&2
            exit 1
          fi
          VERSION=${TAG#v}
          # Use the archive URL (stable and directly matches the formula URL)
          TARBALL_URL="https://github.com/${GITHUB_REPOSITORY}/archive/refs/tags/${TAG}.tar.gz"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "tarball_url=${TARBALL_URL}" >> "$GITHUB_OUTPUT"

      - name: Wait for tarball to be available
        shell: bash
        run: |
          set -euo pipefail
          url='${{ steps.meta.outputs.tarball_url }}'
          echo "Waiting for tarball: $url"
          code=000
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" -L "$url" || true)
            if [[ "$code" == "200" ]]; then
              echo "Tarball available (HTTP $code)"
              break
            fi
            echo "Attempt $i/30: not ready (HTTP $code); sleeping 10s"
            sleep 10
          done
          if [[ "$code" != "200" ]]; then
            echo "Tarball not available after waiting; aborting" >&2
            exit 22
          fi

      - name: Download source tarball
        shell: bash
        run: |
          set -euo pipefail
          curl -fL "${{ steps.meta.outputs.tarball_url }}" -o codex-cli-linker-${{ steps.meta.outputs.version }}.tar.gz

      - name: Compute SHA256
        id: sha
        shell: bash
        run: |
          set -euo pipefail
          sha=$(sha256sum codex-cli-linker-${{ steps.meta.outputs.version }}.tar.gz | awk '{print $1}')
          echo "sha256=${sha}" >> "$GITHUB_OUTPUT"

      - name: Update Homebrew formula
        shell: bash
        run: |
          set -euo pipefail
          file="Formula/codex-cli-linker.rb"
          new_url="https://github.com/${GITHUB_REPOSITORY}/archive/refs/tags/${{ steps.meta.outputs.tag }}.tar.gz"
          new_sha="${{ steps.sha.outputs.sha256 }}"
          tmp=$(mktemp)
          awk -v url="$new_url" -v sha="$new_sha" '
            BEGIN{u=0;s=0}
            /^\s*url \".*\"/ { gsub(/url \".*\"/, "url \"" url "\""); u=1 }
            /^\s*sha256 \"[0-9a-fA-F]+\"/ { gsub(/sha256 \"[0-9a-fA-F]+\"/, "sha256 \"" sha "\""); s=1 }
            { print }
            END{ if(u==0||s==0){ exit 2 } }
          ' "$file" > "$tmp"
          mv "$tmp" "$file"

      - name: Commit and push
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet -- Formula/codex-cli-linker.rb; then
            git config user.name "github-actions"
            git config user.email "github-actions@users.noreply.github.com"
            git add Formula/codex-cli-linker.rb
            git commit -m "chore(homebrew): bump formula to v${{ steps.meta.outputs.version }} [skip ci]"
            DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
            git push origin HEAD:"$DEFAULT_BRANCH"
          else
            echo "Homebrew formula unchanged; nothing to commit"
          fi

